diff --git a/src/include/OpenImageIO/SHA1.h b/src/include/OpenImageIO/SHA1.h
index 54be25f..225b688 100644
diff --git a/src/include/OpenImageIO/imagebufalgo_util.h b/src/include/OpenImageIO/imagebufalgo_util.h
index 3e88f1b..23591ff 100644
--- a/src/include/OpenImageIO/imagebufalgo_util.h
+++ b/src/include/OpenImageIO/imagebufalgo_util.h
@@ -85,6 +85,9 @@ template <class Func>
 void
 parallel_image (Func f, ROI roi, int nthreads=0)
 {
+#ifdef NOTHREADS
+    f(roi);
+#else
     // Special case: threads <= 0 means to use the "threads" attribute
     if (nthreads <= 0)
         OIIO::getattribute ("threads", nthreads);
@@ -107,10 +110,10 @@ parallel_image (Func f, ROI roi, int nthreads=0)
         }
         threads.join_all ();
     }
+#endif
 }
 
 
-
 /// Common preparation for IBA functions: Given an ROI (which may or may not
 /// be the default ROI::All()), destination image (which may or may not yet
 /// be allocated), and optional input images, adjust roi if necessary and
diff --git a/src/include/OpenImageIO/thread.h b/src/include/OpenImageIO/thread.h
index 3d0737c..a7d2ff4 100644
--- a/src/include/OpenImageIO/thread.h
+++ b/src/include/OpenImageIO/thread.h
@@ -834,6 +834,7 @@ typedef spin_rw_mutex::write_lock_guard spin_rw_write_lock;
 
 
 
+#ifndef NOTHREADS
 /// Simple thread group class. This is just as good as boost::thread_group,
 /// for the limited functionality that we use.
 class thread_group {
@@ -871,7 +872,7 @@ private:
     mutex m_mutex;
     std::vector<thread *> m_threads;
 };
-
+#endif // NOTHREADS
 
 OIIO_NAMESPACE_END
 
diff --git a/src/libOpenImageIO/imagebufalgo_compare.cpp b/src/libOpenImageIO/imagebufalgo_compare.cpp
index 84b1595..6643d8a 100644
--- a/src/libOpenImageIO/imagebufalgo_compare.cpp
+++ b/src/libOpenImageIO/imagebufalgo_compare.cpp
@@ -838,6 +838,9 @@ ImageBufAlgo::computePixelHashSHA1 (const ImageBuf &src,
 
     int nblocks = (roi.height()+blocksize-1) / blocksize;
     std::vector<std::string> results (nblocks);
+#ifdef NOTHREADS
+    sha1_hasher (&src, roi, blocksize, &results[0], 0);
+#else
     if (nthreads <= 1) {
         sha1_hasher (&src, roi, blocksize, &results[0], 0);
     } else {
@@ -856,6 +859,7 @@ ImageBufAlgo::computePixelHashSHA1 (const ImageBuf &src,
         }
         threads.join_all ();
     }
+#endif
 
 #ifdef USE_OPENSSL
     // If OpenSSL was available at build time, use its SHA-1
diff --git a/src/testtex/testtex.cpp b/src/testtex/testtex.cpp
index 8cff8a9..6ed8f39 100644
--- a/src/testtex/testtex.cpp
+++ b/src/testtex/testtex.cpp
@@ -144,8 +144,10 @@ getargs (int argc, const char *argv[])
                       "Force number of channels to look up",
                   "--iters %d", &iters,
                       "Iterations for time trials",
+#ifndef NTHREADS
                   "--threads %d", &nthreads, "Number of threads (default 0 = #cores)",
                   "-t %d", &nthreads, "",  // synonym
+#endif
                   "--blur %f", &sblur, "Add blur to texture lookup",
                   "--stblur %f %f", &sblur, &tblur, "Add blur (s, t) to texture lookup",
                   "--width %f", &width, "Multiply filter width of texture lookup",
@@ -180,7 +182,9 @@ getargs (int argc, const char *argv[])
                   "--derivs", &test_derivs, "Test returning derivatives of texture lookups",
                   "--resetstats", &resetstats, "Print and reset statistics on each iteration",
                   "--testhash", &testhash, "Test the tile hashing function",
+#ifndef NOTHREADS
                   "--threadtimes %d", &threadtimes, "Do thread timings (arg = workload profile)",
+#endif
                   "--trials %d", &ntrials, "Number of trials for timings",
                   "--wedge", &wedge, "Wedge test",
                   "--testicwrite %d", &testicwrite, "Test ImageCache write ability (1=seeded, 2=generated)",
@@ -825,6 +829,8 @@ test_hash ()
 
 
 
+#ifndef NOTHREADS
+
 static const char *workload_names[] = {
     /*0*/ "None",
     /*1*/ "Everybody accesses the same spot in one file (handles)",
@@ -962,7 +968,7 @@ launch_tex_threads (int numthreads, int iterations)
     threads.join_all ();
 }
 
-
+#endif
 
 class GridImageInput : public ImageInput {
 public:
@@ -1141,6 +1147,7 @@ main (int argc, const char *argv[])
     xform.invert();
 
     if (threadtimes) {
+#ifndef NOTHREADS
         // If the --iters flag was used, do that number of iterations total
         // (divided among the threads). If not supplied (iters will be 1),
         // then use a large constant *per thread*.
@@ -1171,6 +1178,7 @@ main (int argc, const char *argv[])
                 break;    // don't loop if we're not wedging
         }
         std::cout << "\n";
+#endif
 
     } else if (iters > 0 && filenames.size()) {
         ustring filename (filenames[0]);
